
/* global PlugIn flattenedTags Alert Form moveTasks Task*/
/* eslint spaced-comment: ["error", "always", { "exceptions": ["{"] }] */
/*{
"type": "action",
"targets": ["omnifocus"],
"author": "Kaitlin Salzke",
"identifier": "com.KaitlinSalzke.assignActionGroup",
"description": "Move tasks to an action group within their already-assigned project.",
"label": "Move to Action Group",
"shortLabel": "Move to Action Group",
"image": "arrow.right.to.line.alt",
"version": "1.0.0",
}*/
(() => {
  const action = new PlugIn.Action(async selection => {
    const tag = flattenedTags.byName('Action Group')

    const tasks = selection.tasks

    // FUNCTION: allow user to select location of child task
    const promptAndMove = async (tasks, group) => {
      const locationForm = async () => {
        const form = new Form()
        form.addField(new Form.Field.Option(
          'taskLocation',
          'Insert after',
          ['beginning', ...group.children],
          ['(beginning)', ...group.children.map(child => child.name)],
          group.children[group.children.length - 1]))
        await form.show('Task Location', 'Move')
        return (form.values.taskLocation === 'beginning') ? group.beginning : form.values.taskLocation.after
      }
      const location = group.flattenedTasks.length < 1 ? group.ending : await locationForm()
      const ids = tasks.map(task => task.id.primaryKey)
      moveTasks(tasks, location)
      ids.forEach(id => Task.byIdentifier(id).removeTag(tag))
    }

    // FUNCTION: prompt user for the name of a new action group, create and move
    const addActionGroup = async () => {
      const form = new Form()
      form.addField(new Form.Field.String('groupName', 'Group Name'))
      await form.show('Action Group Name', 'Create and Move')
      const group = new Task(form.values.groupName, proj.ending)
      group.addTag(tag)
      await promptAndMove(tasks, group)
    }

    // get currently assigned project - if none show warning
    const proj = tasks[0].containingProject || tasks[0].assignedContainer
    if (proj === null) {
      const message = tasks.length > 1 ? 'The selected tasks have not been assigned to a project.' : 'The selected task has not been assigned to a project'
      const warning = new Alert('No Project', message)
      warning.show()
      return
    }

    // check which action groups exist
    const groups = proj.flattenedTasks.filter(proj => proj.tags.includes(tag))

    // if there are relevant action groups show selection form
    const getGroupPath = (task) => {
      const getPath = (task) => {
        if (task.parent === task.containingProject.task) return task.name
        else return `${getPath(task.parent)} > ${task.name}`
      }
      return getPath(task)
    }

    if (groups.length > 0) {
      const form = new Form()
      const actionGroupSelect = new Form.Field.Option('actionGroup', 'Action Group', [...groups, 'New action group'], [...groups.map(getGroupPath), 'New action group'], groups[0], 'No action group')
      actionGroupSelect.allowsNull = true
      form.addField(actionGroupSelect)
      await form.show('Select Action Group', 'Move')
      if (form.values.actionGroup === 'New action group') await addActionGroup()
      else await promptAndMove(tasks, form.values.actionGroup)
    }

    // if there are none show warning
    if (groups.length === 0) {
      const warning = new Alert('No Action Groups', 'There are no action groups with the relevant tag in this project.')
      warning.addOption('Add group')
      warning.addOption('OK')
      const alertIndex = await warning.show()
      if (alertIndex === 0) await addActionGroup()
    }
  })

  action.validate = selection => {
    if (selection.tasks.length < 1) return false

    const project = selection.tasks[0].containingProject || selection.tasks[0].assignedContainer
    return selection.tasks.every(task => task.containingProject === project || task.assignedContainer === project)
  }

  return action
})()
